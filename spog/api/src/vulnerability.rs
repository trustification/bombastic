use std::collections::HashMap;

use actix_web::{web, web::ServiceConfig, HttpResponse, Responder};
use spog_model::search::{SearchResult, VulnSummary};

use crate::{search::QueryParams, server::SharedState};

const MAX_LIMIT: usize = 1_000;

pub(crate) fn configure() -> impl FnOnce(&mut ServiceConfig) {
    |config: &mut ServiceConfig| {
        config.service(web::resource("/api/v1/vulnerability/search").to(search));
    }
}

#[utoipa::path(
    get,
    path = "/api/v1/vulnerability/search",
    responses(
        (status = 200, description = "Search was performed successfully", body = Pet),
    ),
    params(
        ("q" = String, Path, description = "Search query"),
        ("offset" = u64, Path, description = "Offset in the search results to return"),
        ("limit" = u64, Path, description = "Max entries returned in the search results"),
    )
)]
pub async fn search(state: web::Data<SharedState>, params: web::Query<QueryParams>) -> impl Responder {
    let params = params.into_inner();
    tracing::info!("Querying VEX using {}", params.q);

    let result = state
        .search_vex(&params.q, params.offset, params.limit.min(MAX_LIMIT))
        .await;

    let (total, mut result) = match result {
        Err(e) => {
            tracing::info!("Error searching: {:?}", e);
            return HttpResponse::InternalServerError().body(e.to_string());
        }
        Ok(result) => (result.total, result.result),
    };

    // Deduplicate data
    let mut m: HashMap<String, VulnSummary> = HashMap::new();
    for item in result.drain(..) {
        if let Some(entry) = m.get_mut(&item.cve) {
            if !entry.advisories.contains(&item.advisory) {
                entry.advisories.push(item.advisory);
            }
        } else {
            m.insert(
                item.cve.clone(),
                VulnSummary {
                    cve: item.cve,
                    advisories: vec![item.advisory],
                    title: item.title,
                    description: item.description,
                    release: item.release,
                    cvss: item.cvss,
                    affected: item.affected,
                    fixed: item.fixed,
                },
            );
        }
    }

    HttpResponse::Ok().json(SearchResult::<Vec<VulnSummary>> {
        total: Some(total),
        result: m.values().cloned().collect(),
    })
}
