use crate::backend::VulnerabilityService;
use crate::components::vulns::VulnerabilityResult;
use crate::hooks::use_backend;
use patternfly_yew::{
    next::{Toolbar, ToolbarContent},
    prelude::*,
};
use std::rc::Rc;
use yew::prelude::*;
use yew_more_hooks::hooks::{use_async_with_cloned_deps, UseAsyncState};

#[function_component(VulnerabilitySearch)]
pub fn package_search() -> Html {
    let backend = use_backend();

    let service = use_memo(
        |backend| VulnerabilityService::new((**backend).clone()),
        backend.clone(),
    );

    // the active query
    let state = use_state_eq(|| {
        // initialize with the state from history, or with a reasonable default
        gloo_utils::history()
            .state()
            .ok()
            .and_then(|state| state.as_string())
            .unwrap_or_else(String::default)
    });

    let search = {
        let service = service.clone();
        use_async_with_cloned_deps(
            move |state| async move { service.search(&state).await.map(|result| Rc::new(result)) },
            (*state).clone(),
        )
    };

    // the current value in the text input field
    let text = use_state_eq(|| (*state).clone());

    let onclear = {
        let text = text.clone();
        Callback::from(move |_| {
            text.set(String::new());
        })
    };
    let onset = {
        let state = state.clone();
        let text = text.clone();
        Callback::from(move |_| {
            state.set((*text).clone());
        })
    };

    use_effect_with_deps(
        |query| {
            // store changes to the state in the current history
            let _ = gloo_utils::history().replace_state(&query.into(), "");
        },
        (*state).clone(),
    );

    html!(
        <>
            <Toolbar>
                <ToolbarContent>
                    <ToolbarGroup>
                        <ToolbarItem r#type={ToolbarItemType::SearchFilter} width={["600px".to_string()]}>
                            <InputGroup>
                                <TextInputGroup>
                                    <TextInputGroupMain
                                        icon={Icon::Search}
                                        placeholder="Filter"
                                        value={(*text).clone()}
                                        oninput={ Callback::from(move |data| text.set(data)) }
                                    />
                                    <TextInputGroupUtilities>
                                        <Button icon={Icon::Times} variant={ButtonVariant::Plain} onclick={onclear} />
                                    </TextInputGroupUtilities>
                                    <Button icon={Icon::ArrowRight} variant={ButtonVariant::Control} onclick={onset} />
                                </TextInputGroup>
                            </InputGroup>
                        </ToolbarItem>
                    </ToolbarGroup>
                </ToolbarContent>
                // <ToolbarContent> { for filters.into_iter() } </ToolbarContent>
            </Toolbar>

            {
                match &*search {
                    UseAsyncState::Pending | UseAsyncState::Processing => { html!( <Bullseye><Spinner/></Bullseye> ) }
                    UseAsyncState::Ready(Ok(result)) if result.is_empty() => {
                        html!(
                            <Bullseye>
                                <EmptyState
                                    title="No results"
                                    icon={Icon::Search}
                                >
                                    { "Try some different query parameters." }
                                </EmptyState>
                            </Bullseye>
                        )
                    },
                    UseAsyncState::Ready(Ok(result)) => {
                        let result = result.clone();
                        html!(<VulnerabilityResult {result} />)
                    },
                    UseAsyncState::Ready(Err(err)) => html!(
                        <Bullseye>
                            <Title>{"Search error"}</Title>
                            { err }
                        </Bullseye>
                    ),
                }
            }

        </>
    )
}
