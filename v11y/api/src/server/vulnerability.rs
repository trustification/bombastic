use actix_web::{error::ResponseError, get, post, web, HttpResponse, Responder};

use crate::db::DbError;
use v11y_client::Vulnerability;

use crate::server::Error;
use crate::SharedState;

impl ResponseError for DbError {}

/// Record vulnerability information
#[utoipa::path(
    responses(
        (status = 200, description = "Successfully ingested"),
        (status = BAD_REQUEST, description = "Missing valid id"),
    ),
)]
#[post("/vulnerability")]
pub(crate) async fn ingest_vulnerability(
    state: web::Data<SharedState>,
    vuln: web::Json<Vulnerability>,
) -> actix_web::Result<impl Responder> {
    state.db.ingest(&vuln).await.map_err(|_| Error::Db)?;
    Ok(HttpResponse::Ok().finish())
}

/// Retrieve vulnerability information
#[utoipa::path(
    responses(
        (status = 200, description = "Successfully retrieved"),
        (status = BAD_REQUEST, description = "Missing valid id"),
    ),
)]
#[get("/vulnerability/{id}")]
pub(crate) async fn get(state: web::Data<SharedState>, id: web::Path<String>) -> actix_web::Result<impl Responder> {
    let vuln = state.db.get(&id, None).await?;
    Ok(HttpResponse::Ok().json(vuln))
}
