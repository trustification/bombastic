release: ${IMAGE_TAG}
trustImage: ${BACKEND_IMAGE}
uiImage: ${FRONTEND_IMAGE}
guacImage: ${GUAC_IMAGE}
testsImage: ${INTEGRATION_TESTS_IMAGE}
domain: ${DOMAIN}
createRoutes: false
replicas: ${{REPLICAS}}
collectSubReplicas: ${{GUAC_COLLECTSUB_REPLICAS}}
graphqlReplicas: ${{GUAC_GRAPHQL_REPLICAS}}
imagePullPolicy: Always
region: ${AWS_REGION}
enableDocs: false
enableTests: false
enableMonitoring: false
config:
  name: ${CONFIG_NAME}
spog:
  branding: false
  crdaUrl: ${CRDA_URL}
  ui:
    replicas: ${{SPOG_UI_REPLICAS}}
    customize: true
    resources: ${{SPOG_UI_RESOURCES}}
    initialBackendJson: ${INITIAL_BACKEND_JSON}
    segmentWriteKey:
      valueFrom:
        secretKeyRef:
          name: ${SEGMENT_SECRET_NAME}
          key: ${SEGMENT_SECRET_UI_KEY}
  api:
    replicas: ${{SPOG_API_REPLICAS}}
    resources: ${{SPOG_API_RESOURCES}}
    logLevel: ${LOG_LEVEL}
    snyk:
      credentials: snyk-collector-secret
    segmentWriteKey:
      valueFrom:
        secretKeyRef:
          name: ${SEGMENT_SECRET_NAME}
          key: ${SEGMENT_SECRET_API_KEY}
bombastic:
  bucket: ${BOMBASTIC_STORAGE_BUCKET}
  credentials: ${BOMBASTIC_AWS_SECRET_NAME}
  indexMode: file
  collector:
    enabled: true
    schedule: ${BOMBASTIC_COLLECTOR_SCHEDULE}
    resources: ${{BOMBASTIC_COLLECTOR_RESOURCES}}
  indexer:
    replicas: ${{BOMBASTIC_INDEXER_REPLICAS}}
    reindex: true
    indexSyncInterval: ${BOMBASTIC_INDEXER_INDEX_SYNC_INTERVAL}
    indexWriterMemoryBytes: ${BOMBASTIC_INDEXER_INDEX_WRITER_MEMORY_BYTES}
    topics:
      stored: ${BOMBASTIC_INDEXER_STORED_TOPIC}
      indexed: ${BOMBASTIC_INDEXER_INDEXED_TOPIC}
      failed: ${BOMBASTIC_INDEXER_FAILED_TOPIC}
    resources: ${{BOMBASTIC_INDEXER_RESOURCES}}
    logLevel: ${LOG_LEVEL}
  walker:
    enabled: true
    suspend: ${{BOMBASTIC_WALKER_SUSPEND}}
    schedule: ${BOMBASTIC_WALKER_SCHEDULE}
    source: "https://access.redhat.com/security/data/sbom/beta/"
    signingKey: "https://access.redhat.com/security/data/97f5eac4.txt#77E79ABE93673533ED09EBE2DCE3823597F5EAC4"
    resources: ${{BOMBASTIC_WALKER_RESOURCES}}
    logLevel: ${LOG_LEVEL}
  api:
    indexSyncInterval: ${BOMBASTIC_API_INDEX_SYNC_INTERVAL}
    resources: ${{BOMBASTIC_API_RESOURCES}}
    logLevel: ${LOG_LEVEL}
    replicas: ${{BOMBASTIC_API_REPLICAS}}
v11y:
  enabled: true
  bucket: ${V11Y_STORAGE_BUCKET}
  credentials: ${V11Y_AWS_SECRET_NAME}
  indexMode: file
  api:
    indexSyncInterval: ${V11Y_API_INDEX_SYNC_INTERVAL}
    resources: ${{V11Y_API_RESOURCES}}
    logLevel: ${LOG_LEVEL}
    replicas: ${{V11Y_API_REPLICAS}}
  indexer:
    replicas: ${{V11Y_INDEXER_REPLICAS}}
    reindex: false
    indexSyncInterval: ${V11Y_INDEXER_INDEX_SYNC_INTERVAL}
    indexWriterMemoryBytes: ${V11Y_INDEXER_INDEX_WRITER_MEMORY_BYTES}
    topics:
      stored: ${V11Y_INDEXER_STORED_TOPIC}
      indexed: ${V11Y_INDEXER_INDEXED_TOPIC}
      failed: ${V11Y_INDEXER_FAILED_TOPIC}
    resources: ${{V11Y_INDEXER_RESOURCES}}
    logLevel: ${LOG_LEVEL}
  walker:
    enabled: true
    suspend: ${{V11Y_WALKER_SUSPEND}}
    schedule: ${V11Y_WALKER_SCHEDULE}
    resources: ${{V11Y_WALKER_RESOURCES}}
collectorist:
  enabled: true
  api:
    replicas: ${{COLLECTORIST_API_REPLICAS}}
    resources: ${{COLLECTORIST_RESOURCES}}
    logLevel: ${LOG_LEVEL}
exhort:
  enabled: true
  api:
    replicas: ${{EXHORT_API_REPLICAS}}
    resources: ${{EXHORT_API_RESOURCES}}
    logLevel: ${LOG_LEVEL}
collector:
  snyk:
    enabled: false
    credentials: snyk-collector-secret
    resources: ${{COLLECTOR_SNYK_RESOURCES}}
    logLevel: ${LOG_LEVEL}
  osv:
    enabled: true
    replicas: ${{COLLECTOR_OSV_REPLICAS}}
    resources: ${{COLLECTOR_OSV_RESOURCES}}
    logLevel: ${LOG_LEVEL}
vexination:
  bucket: ${VEXINATION_STORAGE_BUCKET}
  credentials: ${VEXINATION_AWS_SECRET_NAME}
  indexMode: file
  collector:
    enabled: true
    schedule: ${VEXINATION_COLLECTOR_SCHEDULE}
    resources: ${{VEXINATION_COLLECTOR_RESOURCES}}
  walker:
    enabled: true
    suspend: ${{VEXINATION_WALKER_SUSPEND}}
    schedule: ${VEXINATION_WALKER_SCHEDULE}
    source: https://www.redhat.com/.well-known/csaf/provider-metadata.json
    ignore: https://access.redhat.com/security/data/csaf/v2/advisories/
    logLevel: ${LOG_LEVEL}
  indexer:
    replicas: ${{VEXINATION_INDEXER_REPLICAS}}
    reindex: false
    indexSyncInterval: ${VEXINATION_INDEXER_INDEX_SYNC_INTERVAL}
    indexWriterMemoryBytes: ${VEXINATION_INDEXER_INDEX_WRITER_MEMORY_BYTES}
    topics:
      stored: ${VEXINATION_INDEXER_STORED_TOPIC}
      indexed: ${VEXINATION_INDEXER_INDEXED_TOPIC}
      failed: ${VEXINATION_INDEXER_FAILED_TOPIC}
    resources: ${{VEXINATION_INDEXER_RESOURCES}}
    logLevel: ${LOG_LEVEL}
  api:
    replicas: ${{VEXINATION_API_REPLICAS}}
    indexSyncInterval: ${VEXINATION_API_INDEX_SYNC_INTERVAL}
    resources: ${{VEXINATION_API_RESOURCES}}
    logLevel: ${LOG_LEVEL}
keycloak:
  enabled: false
guac:
  enabled: true
  database:
    enabled: true
    image: ${POSTGRESQL_IMAGE}
    admin_db_secret_name: ${GUAC_ADMIN_DB_SECRET_NAME}
    user_db_secret_name: ${GUAC_USER_DB_SECRET_NAME}
  initJob:
    serviceAccountName: ${GUAC_INIT_JOB_SERVICE_ACCOUNT}
  graphql:
    debug: false
    affinity: ${{GUAC_GQL_AFFINITY}}
    resources: ${{GUAC_GQL_RESOURCES}}
oidcClients:
  frontend:
    issuerUrl: ${ISSUER_URL}
    scopes: "openid email id.username api.trusted_content"
    clientId:
      value: ${OIDC_SPOG_CLIENT_ID}
  walker:
    issuerUrl: ${ISSUER_URL}
    scopes: "openid id.username"
    clientId:
      value: ${OIDC_API_CLIENT_ID}
    clientSecret:
      valueFrom:
        secretKeyRef:
          name: ${OIDC_PROVIDER_CLIENT_SECRET_NAME}
          key: ${OIDC_PROVIDER_CLIENT_SECRET_KEY}
  testingManager:
    issuerUrl: ${ISSUER_URL}
    scopes: "openid id.username"
    clientId:
      value: ${OIDC_API_CLIENT_ID}
  testingUser:
    issuerUrl: ${ISSUER_URL}
    scopes: "openid id.username"
    clientId:
      value: ${OIDC_API_CLIENT_ID}
dataset:
  enabled: false
  enabledJob: ${{DATASET_ENABLED_JOB}}
  suspendJob: ${{DATASET_SUSPEND_JOB}}
  scheduleJob: ${DATASET_SCHEDULE_JOB}
