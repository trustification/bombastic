apiVersion: v1
kind: Template
metadata:
  name: trustification
objects:
  - apiVersion: policy/v1
    kind: PodDisruptionBudget
    metadata:
      name: trustification-nats
      namespace: ${K8S_NAMESPACE}
      labels:
        helm.sh/chart: nats-0.19.17
        app.kubernetes.io/name: nats
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 2.9.20
        app.kubernetes.io/managed-by: Helm
    spec:
      maxUnavailable: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: nats
          app.kubernetes.io/instance: trustification
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: trustification-nats
      namespace: ${K8S_NAMESPACE}
      labels:
        helm.sh/chart: nats-0.19.17
        app.kubernetes.io/name: nats
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 2.9.20
        app.kubernetes.io/managed-by: Helm
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: trustification-nats-config
      namespace: ${K8S_NAMESPACE}
      labels:
        helm.sh/chart: nats-0.19.17
        app.kubernetes.io/name: nats
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 2.9.20
        app.kubernetes.io/managed-by: Helm
    data:
      nats.conf: '# NATS Clients Port

        port: 4222


        # PID file shared with configuration reloader.

        pid_file: "/var/run/nats/nats.pid"


        ###############

        #             #

        # Monitoring  #

        #             #

        ###############

        http: 8222

        server_name: $POD_NAME

        lame_duck_grace_period: 10s

        lame_duck_duration: 30s

        '
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: guac-cm
      labels:
        app.kubernetes.io/name: guac-cm
        app.kubernetes.io/component: cm
        app.kubernetes.io/part-of: trustification
    data:
      guac.yaml: '

        # Nats setup

        nats-addr: nats://trustification-nats.${K8S_NAMESPACE}.svc:4222


        # CSub setup

        csub-addr: "guac-collectsub.${K8S_NAMESPACE}.svc.cluster.local:2782"

        csub-listen-port: 2782


        # GQL setup

        gql-backend: inmem

        gql-listen-port: 8080

        gql-debug: false

        gql-test-data: false

        gql-addr: http://guac-graphql.${K8S_NAMESPACE}.svc:8080/query


        # Collector behavior

        service-poll: false

        use-csub: true

        '
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: spog-ui-branding
      labels:
        app.kubernetes.io/name: spog-ui
        app.kubernetes.io/component: ui
        app.kubernetes.io/part-of: trustification
    binaryData: null
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: collectorist-storage
      labels:
        app.kubernetes.io/name: collectorist-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: v11y-storage
      labels:
        app.kubernetes.io/name: v11y-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - apiVersion: v1
    kind: Service
    metadata:
      name: trustification-nats
      namespace: ${K8S_NAMESPACE}
      labels:
        helm.sh/chart: nats-0.19.17
        app.kubernetes.io/name: nats
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 2.9.20
        app.kubernetes.io/managed-by: Helm
    spec:
      selector:
        app.kubernetes.io/name: nats
        app.kubernetes.io/instance: trustification
      clusterIP: None
      publishNotReadyAddresses: true
      ports:
        - name: client
          port: 4222
          appProtocol: tcp
        - name: cluster
          port: 6222
          appProtocol: tcp
        - name: monitor
          port: 8222
          appProtocol: http
        - name: metrics
          port: 7777
          appProtocol: http
        - name: leafnodes
          port: 7422
          appProtocol: tcp
        - name: gateways
          port: 7522
          appProtocol: tcp
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: bombastic-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: bombastic-api-tls
      name: bombastic-api
    spec:
      ports:
        - name: endpoint
          port: 443
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: bombastic-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: collector-nvd
        app.kubernetes.io/component: collector
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: collector-nvd-tls
      name: collector-nvd
    spec:
      ports:
        - name: endpoint
          port: 443
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: collector-nvd
        app.kubernetes.io/component: collector
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: collector-osv
        app.kubernetes.io/component: collector
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: collector-osv-tls
      name: collector-osv
    spec:
      ports:
        - name: endpoint
          port: 443
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: collector-osv
        app.kubernetes.io/component: collector
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: collector-snyk
        app.kubernetes.io/component: collector
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: collector-snyk-tls
      name: collector-snyk
    spec:
      ports:
        - name: endpoint
          port: 443
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: collector-snyk
        app.kubernetes.io/component: collector
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: collectorist-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: collectorist-api-tls
      name: collectorist-api
    spec:
      ports:
        - name: endpoint
          port: 443
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: collectorist-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: exhort-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: exhort-api-tls
      name: exhort-api
    spec:
      ports:
        - name: endpoint
          port: 443
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: exhort-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: guac-collectsub
        app.kubernetes.io/component: collectsub
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: guac-collectsub-tls
      name: guac-collectsub
    spec:
      ports:
        - name: endpoint
          port: 2782
          protocol: TCP
          targetPort: 2782
      selector:
        app.kubernetes.io/name: guac-collectsub
        app.kubernetes.io/component: collectsub
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: guac-graphql
        app.kubernetes.io/component: graphql
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: guac-graphql-tls
      name: guac-graphql
    spec:
      ports:
        - name: endpoint
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: guac-graphql
        app.kubernetes.io/component: graphql
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: trustification-monitoring
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: trustification
      name: trustification-monitoring
    spec:
      ports:
        - name: metrics
          port: 9010
          protocol: TCP
          targetPort: 9010
      selector:
        app.kubernetes.io/part-of: trustification
        metrics: 'true'
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: spog-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: spog-api-tls
      name: spog-api
    spec:
      ports:
        - name: endpoint
          port: 443
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: spog-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: spog-ui
        app.kubernetes.io/component: ui
        app.kubernetes.io/part-of: trustification
      name: spog-ui
    spec:
      ports:
        - name: endpoint
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: spog-ui
        app.kubernetes.io/component: ui
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: v11y-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: v11y-api-tls
      name: v11y-api
    spec:
      ports:
        - name: endpoint
          port: 443
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: v11y-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/name: vexination-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: vexination-api-tls
      name: vexination-api
    spec:
      ports:
        - name: endpoint
          port: 443
          protocol: TCP
          targetPort: 8080
      selector:
        app.kubernetes.io/name: vexination-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      type: ClusterIP
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: trustification-nats-box
      namespace: ${K8S_NAMESPACE}
      labels:
        app: trustification-nats-box
        chart: nats-0.19.17
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: trustification-nats-box
      template:
        metadata:
          labels:
            app: trustification-nats-box
        spec:
          volumes: null
          containers:
            - name: nats-box
              image: natsio/nats-box:0.13.8
              imagePullPolicy: IfNotPresent
              resources: {}
              env:
                - name: NATS_URL
                  value: trustification-nats
              command:
                - tail
                - -f
                - /dev/null
              volumeMounts: null
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: bombastic-api
      labels:
        app.kubernetes.io/name: bombastic-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: bombastic-api
          app.kubernetes.io/component: api
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: bombastic-api
            app.kubernetes.io/component: api
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          volumes:
            - name: data
              emptyDir: {}
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: tls
              secret:
                secretName: bombastic-api-tls
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - bombastic
                - api
                - -p
                - '8080'
                - --index-mode
                - file
                - --auth-configuration
                - /etc/config/auth.yaml
              env:
                - name: RUST_LOG
                  value: info
                - name: STORAGE_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${BOMBASTIC_AWS_SECRET_NAME}
                      key: aws_access_key_id
                - name: STORAGE_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${BOMBASTIC_AWS_SECRET_NAME}
                      key: aws_secret_access_key
                - name: STORAGE_REGION
                  value: ${AWS_REGION}
                - name: STORAGE_BUCKET
                  value: ${BOMBASTIC_STORAGE_BUCKET}
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: SWAGGER_UI_OIDC_ISSUER_URL
                  value: ${ISSUER_URL}
              volumeMounts:
                - name: data
                  mountPath: /data
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{BOMBASTIC_API_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: bombastic-exporter
      labels:
        app.kubernetes.io/name: bombastic-exporter
        app.kubernetes.io/component: exporter
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: bombastic-exporter
          app.kubernetes.io/component: exporter
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: bombastic-exporter
            app.kubernetes.io/component: exporter
            app.kubernetes.io/part-of: trustification
        spec:
          volumes:
            - name: data
              emptyDir: {}
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - exporter
                - --event-bus
                - sqs
                - --stored-topic
                - ${BOMBASTIC_INDEXER_GUAC_TOPIC}
                - --storage-bucket
                - ${BOMBASTIC_STORAGE_BUCKET}
                - --guac-url
                - trustification-nats:4222
                - --document-type
                - sbom
              env:
                - name: RUST_LOG
                  value: info
                - name: STORAGE_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${BOMBASTIC_AWS_SECRET_NAME}
                      key: aws_access_key_id
                - name: STORAGE_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${BOMBASTIC_AWS_SECRET_NAME}
                      key: aws_secret_access_key
                - name: STORAGE_REGION
                  value: ${AWS_REGION}
                - name: STORAGE_BUCKET
                  value: ${BOMBASTIC_STORAGE_BUCKET}
                - name: SQS_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${BOMBASTIC_AWS_SECRET_NAME}
                      key: aws_access_key_id
                - name: SQS_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${BOMBASTIC_AWS_SECRET_NAME}
                      key: aws_secret_access_key
                - name: SQS_REGION
                  value: ${AWS_REGION}
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
              volumeMounts:
                - name: data
                  mountPath: /data
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: bombastic-indexer
      labels:
        app.kubernetes.io/name: bombastic-indexer
        app.kubernetes.io/component: indexer
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: bombastic-indexer
          app.kubernetes.io/component: indexer
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: bombastic-indexer
            app.kubernetes.io/component: indexer
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
        spec:
          volumes:
            - name: data
              emptyDir: {}
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - bombastic
                - indexer
                - --event-bus
                - sqs
                - --stored-topic
                - ${BOMBASTIC_INDEXER_STORED_TOPIC}
                - --indexed-topic
                - ${BOMBASTIC_INDEXER_INDEXED_TOPIC}
                - --failed-topic
                - ${BOMBASTIC_INDEXER_FAILED_TOPIC}
                - --index-mode
                - file
                - --index-dir
                - /data/index
                - --reindex
                - always
              env:
                - name: RUST_LOG
                  value: info
                - name: STORAGE_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${BOMBASTIC_AWS_SECRET_NAME}
                      key: aws_access_key_id
                - name: STORAGE_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${BOMBASTIC_AWS_SECRET_NAME}
                      key: aws_secret_access_key
                - name: STORAGE_REGION
                  value: ${AWS_REGION}
                - name: STORAGE_BUCKET
                  value: ${BOMBASTIC_STORAGE_BUCKET}
                - name: SQS_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${BOMBASTIC_AWS_SECRET_NAME}
                      key: aws_access_key_id
                - name: SQS_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${BOMBASTIC_AWS_SECRET_NAME}
                      key: aws_secret_access_key
                - name: SQS_REGION
                  value: ${AWS_REGION}
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
              volumeMounts:
                - name: data
                  mountPath: /data
              ports:
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{BOMBASTIC_INDEXER_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: collector-nvd
      labels:
        app.kubernetes.io/name: collector-nvd
        app.kubernetes.io/component: collector
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app.kubernetes.io/name: collector-nvd
          app.kubernetes.io/component: collector
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: collector-nvd
            app.kubernetes.io/component: collector
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          volumes:
            - name: data
              emptyDir: {}
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: tls
              secret:
                secretName: collector-nvd-tls
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - collector
                - nvd
                - -p
                - '8080'
                - --auth-configuration
                - /etc/config/auth.yaml
                - --v11y-url
                - https://v11y-api.$(NAMESPACE).svc
                - --guac-url
                - http://guac-graphql.$(NAMESPACE).svc:8080/query
              env:
                - name: RUST_LOG
                  value: info
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: NVD_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: nvd-collector-secret
                      key: nvd_api_key
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: SWAGGER_UI_OIDC_ISSUER_URL
                  value: ${ISSUER_URL}
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: trusted-content-api
                - name: OIDC_PROVIDER_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: ${OIDC_PROVIDER_CLIENT_SECRET_KEY}
                      name: ${OIDC_PROVIDER_CLIENT_SECRET_NAME}
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: ${ISSUER_URL}
              volumeMounts:
                - name: data
                  mountPath: /data
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{COLLECTOR_NVD_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: collector-osv
      labels:
        app.kubernetes.io/name: collector-osv
        app.kubernetes.io/component: collector
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app.kubernetes.io/name: collector-osv
          app.kubernetes.io/component: collector
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: collector-osv
            app.kubernetes.io/component: collector
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          volumes:
            - name: data
              emptyDir: {}
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: tls
              secret:
                secretName: collector-osv-tls
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - collector
                - osv
                - -p
                - '8080'
                - --auth-configuration
                - /etc/config/auth.yaml
                - --v11y-url
                - https://v11y-api.$(NAMESPACE).svc
                - --guac-url
                - http://guac-graphql.$(NAMESPACE).svc:8080/query
              env:
                - name: RUST_LOG
                  value: info
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: SWAGGER_UI_OIDC_ISSUER_URL
                  value: ${ISSUER_URL}
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: trusted-content-api
                - name: OIDC_PROVIDER_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: ${OIDC_PROVIDER_CLIENT_SECRET_KEY}
                      name: ${OIDC_PROVIDER_CLIENT_SECRET_NAME}
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: ${ISSUER_URL}
              volumeMounts:
                - name: data
                  mountPath: /data
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{COLLECTOR_OSV_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: collector-snyk
      labels:
        app.kubernetes.io/name: collector-snyk
        app.kubernetes.io/component: collector
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app.kubernetes.io/name: collector-snyk
          app.kubernetes.io/component: collector
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: collector-snyk
            app.kubernetes.io/component: collector
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          volumes:
            - name: data
              emptyDir: {}
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: tls
              secret:
                secretName: collector-snyk-tls
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - collector
                - snyk
                - -p
                - '8080'
                - --auth-configuration
                - /etc/config/auth.yaml
                - --v11y-url
                - https://v11y-api.$(NAMESPACE).svc
                - --guac-url
                - http://guac-graphql.$(NAMESPACE).svc:8080/query
              env:
                - name: RUST_LOG
                  value: info
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: SNYK_ORG_ID
                  valueFrom:
                    secretKeyRef:
                      name: snyk-collector-secret
                      key: snyk_org_id
                - name: SNYK_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: snyk-collector-secret
                      key: snyk_token
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: SWAGGER_UI_OIDC_ISSUER_URL
                  value: ${ISSUER_URL}
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: trusted-content-api
                - name: OIDC_PROVIDER_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: ${OIDC_PROVIDER_CLIENT_SECRET_KEY}
                      name: ${OIDC_PROVIDER_CLIENT_SECRET_NAME}
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: ${ISSUER_URL}
              volumeMounts:
                - name: data
                  mountPath: /data
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{COLLECTOR_SNYK_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: collectorist-api
      labels:
        app.kubernetes.io/name: collectorist-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: collectorist-api
          app.kubernetes.io/component: api
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: collectorist-api
            app.kubernetes.io/component: api
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: collectorist-storage
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: tls
              secret:
                secretName: collectorist-api-tls
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - collectorist
                - api
                - -p
                - '8080'
                - --csub-url
                - http://guac-collectsub:2782
                - --auth-configuration
                - /etc/config/auth.yaml
                - --storage-base
                - /data
                - --collector-config
                - /etc/config/collectorist.yaml
              env:
                - name: RUST_LOG
                  value: info
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: trusted-content-api
                - name: OIDC_PROVIDER_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: ${OIDC_PROVIDER_CLIENT_SECRET_KEY}
                      name: ${OIDC_PROVIDER_CLIENT_SECRET_NAME}
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: ${ISSUER_URL}
              volumeMounts:
                - name: data
                  mountPath: /data
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{COLLECTORIST_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: exhort-api
      labels:
        app.kubernetes.io/name: exhort-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: exhort-api-tls
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: exhort-api
          app.kubernetes.io/component: api
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: exhort-api
            app.kubernetes.io/component: api
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          volumes:
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: tls
              secret:
                secretName: exhort-api-tls
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - exhort
                - api
                - -p
                - '8080'
                - --auth-configuration
                - /etc/config/auth.yaml
              env:
                - name: RUST_LOG
                  value: info
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: COLLECTORIST_URL
                  value: https://collectorist-api.$(NAMESPACE).svc
                - name: V11Y_URL
                  value: https://v11y-api.$(NAMESPACE).svc
                - name: GUAC_URL
                  value: http://guac-graphql:8080/query
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: trusted-content-api
                - name: OIDC_PROVIDER_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: ${OIDC_PROVIDER_CLIENT_SECRET_KEY}
                      name: ${OIDC_PROVIDER_CLIENT_SECRET_NAME}
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: ${ISSUER_URL}
              volumeMounts:
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{EXHORT_API_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: guac-collectsub
      labels:
        app.kubernetes.io/name: guac-collectsub
        app.kubernetes.io/component: collectsub
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: guac-collectsub
          app.kubernetes.io/component: collectsub
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: guac-collectsub
            app.kubernetes.io/component: collectsub
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          volumes:
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: guac-config
              configMap:
                name: guac-cm
            - name: tls
              secret:
                secretName: guac-collectsub-tls
          containers:
            - image: ${GUAC_IMAGE}
              imagePullPolicy: Always
              name: service
              command:
                - /opt/guac/guaccsub
              args: []
              workingDir: /guac
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
              volumeMounts:
                - name: guac-config
                  mountPath: /guac
                  readOnly: true
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
              ports:
                - containerPort: 2782
                  protocol: TCP
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: guac-graphql
      labels:
        app.kubernetes.io/name: guac-graphql
        app.kubernetes.io/component: graphql
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: guac-graphql
          app.kubernetes.io/component: graphql
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: guac-graphql
            app.kubernetes.io/component: graphql
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          volumes:
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: guac-config
              configMap:
                name: guac-cm
            - name: tls
              secret:
                secretName: guac-graphql-tls
          containers:
            - image: ${GUAC_IMAGE}
              imagePullPolicy: Always
              name: service
              command:
                - /opt/guac/guacgql
              args: []
              workingDir: /guac
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
              volumeMounts:
                - name: guac-config
                  mountPath: /guac
                  readOnly: true
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
              ports:
                - containerPort: 8080
                  protocol: TCP
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: spog-api
      labels:
        app.kubernetes.io/name: spog-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: spog-api
          app.kubernetes.io/component: api
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: spog-api
            app.kubernetes.io/component: api
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - spog
                - api
                - -p
                - '8080'
                - --bombastic-url
                - https://bombastic-api.$(NAMESPACE).svc
                - --vexination-url
                - https://vexination-api.$(NAMESPACE).svc
                - --collectorist-url
                - https://collectorist-api.$(NAMESPACE).svc
                - --v11y-url
                - https://v11y-api.$(NAMESPACE).svc
                - --crda-url
                - http://alpha-exhort.apps.sssc-cl01.appeng.rhecoeng.com/
                - --auth-configuration
                - /etc/config/auth.yaml
              env:
                - name: RUST_LOG
                  value: info
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: SPOG_UI_CONFIG
                  value: /etc/config/spog-ui.yaml
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: trusted-content-api
                - name: OIDC_PROVIDER_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: ${OIDC_PROVIDER_CLIENT_SECRET_KEY}
                      name: ${OIDC_PROVIDER_CLIENT_SECRET_NAME}
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: ${ISSUER_URL}
                - name: SWAGGER_UI_OIDC_ISSUER_URL
                  value: ${ISSUER_URL}
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{SPOG_API_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
              volumeMounts:
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
          volumes:
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: tls
              secret:
                secretName: spog-api-tls
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: spog-ui
      labels:
        app.kubernetes.io/name: spog-ui
        app.kubernetes.io/component: ui
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: spog-ui
          app.kubernetes.io/component: ui
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: spog-ui
            app.kubernetes.io/component: ui
            app.kubernetes.io/part-of: trustification
        spec:
          volumes:
            - name: endpoints
              emptyDir: {}
            - name: run
              emptyDir: {}
            - name: branding
              configMap:
                name: spog-ui-branding
          containers:
            - image: ${FRONTEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              env:
                - name: API_URL
                  value: https://api.${DOMAIN}
                - name: BOMBASTIC_URL
                  value: https://sbom.${DOMAIN}
                - name: VEXINATION_URL
                  value: https://vex.${DOMAIN}
                - name: ISSUER_URL
                  value: ${ISSUER_URL}
                - name: CLIENT_ID
                  value: trusted-content-frontend
                - name: SCOPES
                  value: openid id.username
              volumeMounts:
                - name: endpoints
                  mountPath: /endpoints
                - name: branding
                  mountPath: /public/branding
                - name: run
                  mountPath: /run
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources: ${{SPOG_UI_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /
                  port: 8080
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /
                  port: 8080
                initialDelaySeconds: 2
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: v11y-api
      labels:
        app.kubernetes.io/name: v11y-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: v11y-api-tls
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: v11y-api
          app.kubernetes.io/component: api
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: v11y-api
            app.kubernetes.io/component: api
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: v11y-storage
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: tls
              secret:
                secretName: v11y-api-tls
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - v11y
                - api
                - -p
                - '8080'
                - --auth-disabled
                - --storage-base
                - /data
              env:
                - name: RUST_LOG
                  value: info
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
              volumeMounts:
                - name: data
                  mountPath: /data
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{V11Y_API_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: vexination-api
      labels:
        app.kubernetes.io/name: vexination-api
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: vexination-api
          app.kubernetes.io/component: api
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: vexination-api
            app.kubernetes.io/component: api
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
          annotations:
            config/checksum: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          volumes:
            - name: data
              emptyDir: {}
            - name: config
              configMap:
                name: ${CONFIG_NAME}
            - name: tls
              secret:
                secretName: vexination-api-tls
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - vexination
                - api
                - -p
                - '8080'
                - --index-mode
                - file
                - --auth-configuration
                - /etc/config/auth.yaml
              env:
                - name: RUST_LOG
                  value: info
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: HTTP_SERVER_TLS_ENABLED
                  value: 'true'
                - name: HTTP_SERVER_TLS_KEY_FILE
                  value: /etc/tls/tls.key
                - name: HTTP_SERVER_TLS_CERTIFICATE_FILE
                  value: /etc/tls/tls.crt
                - name: STORAGE_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${VEXINATION_AWS_SECRET_NAME}
                      key: aws_access_key_id
                - name: STORAGE_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${VEXINATION_AWS_SECRET_NAME}
                      key: aws_secret_access_key
                - name: STORAGE_REGION
                  value: ${AWS_REGION}
                - name: STORAGE_BUCKET
                  value: ${VEXINATION_STORAGE_BUCKET}
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: SWAGGER_UI_OIDC_ISSUER_URL
                  value: ${ISSUER_URL}
              volumeMounts:
                - name: data
                  mountPath: /data
                - mountPath: /etc/config
                  name: config
                - mountPath: /etc/tls
                  name: tls
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{VEXINATION_API_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: vexination-indexer
      labels:
        app.kubernetes.io/name: vexination-indexer
        app.kubernetes.io/component: indexer
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: vexination-indexer
          app.kubernetes.io/component: indexer
          app.kubernetes.io/part-of: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: vexination-indexer
            app.kubernetes.io/component: indexer
            app.kubernetes.io/part-of: trustification
            metrics: 'true'
        spec:
          volumes:
            - name: data
              emptyDir: {}
          containers:
            - image: ${BACKEND_IMAGE}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: service
              command:
                - /trust
              args:
                - vexination
                - indexer
                - --event-bus
                - sqs
                - --stored-topic
                - ${VEXINATION_INDEXER_STORED_TOPIC}
                - --indexed-topic
                - ${VEXINATION_INDEXER_INDEXED_TOPIC}
                - --failed-topic
                - ${VEXINATION_INDEXER_FAILED_TOPIC}
                - --index-mode
                - file
                - --index-dir
                - /data/index
                - --reindex
                - always
              env:
                - name: RUST_LOG
                  value: info
                - name: STORAGE_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${VEXINATION_AWS_SECRET_NAME}
                      key: aws_access_key_id
                - name: STORAGE_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${VEXINATION_AWS_SECRET_NAME}
                      key: aws_secret_access_key
                - name: STORAGE_REGION
                  value: ${AWS_REGION}
                - name: STORAGE_BUCKET
                  value: ${VEXINATION_STORAGE_BUCKET}
                - name: SQS_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${VEXINATION_AWS_SECRET_NAME}
                      key: aws_access_key_id
                - name: SQS_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${VEXINATION_AWS_SECRET_NAME}
                      key: aws_secret_access_key
                - name: SQS_REGION
                  value: ${AWS_REGION}
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
              volumeMounts:
                - name: data
                  mountPath: /data
              ports:
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              resources: ${{VEXINATION_INDEXER_RESOURCES}}
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 9010
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 9010
                initialDelaySeconds: 2
              startupProbe:
                httpGet:
                  path: /health/startup
                  port: 9010
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: trustification-nats
      namespace: ${K8S_NAMESPACE}
      labels:
        helm.sh/chart: nats-0.19.17
        app.kubernetes.io/name: nats
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 2.9.20
        app.kubernetes.io/managed-by: Helm
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/name: nats
          app.kubernetes.io/instance: trustification
      replicas: 1
      serviceName: trustification-nats
      podManagementPolicy: Parallel
      template:
        metadata:
          annotations:
            prometheus.io/path: /metrics
            prometheus.io/port: '7777'
            prometheus.io/scrape: 'true'
            checksum/config: 2ba828bdd8e69fe3fdc0acc1d2364a66469e39962f6b2279763aa559e728afb7
          labels:
            app.kubernetes.io/name: nats
            app.kubernetes.io/instance: trustification
        spec:
          dnsPolicy: ClusterFirst
          volumes:
            - name: config-volume
              configMap:
                name: trustification-nats-config
            - name: pid
              emptyDir: {}
          serviceAccountName: trustification-nats
          shareProcessNamespace: true
          terminationGracePeriodSeconds: 60
          containers:
            - name: nats
              image: nats:2.9.20-alpine
              imagePullPolicy: IfNotPresent
              resources: {}
              ports:
                - containerPort: 4222
                  name: client
                - containerPort: 6222
                  name: cluster
                - containerPort: 8222
                  name: monitor
              command:
                - nats-server
                - --config
                - /etc/nats-config/nats.conf
              env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: SERVER_NAME
                  value: $(POD_NAME)
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: CLUSTER_ADVERTISE
                  value: $(POD_NAME).trustification-nats.$(POD_NAMESPACE).svc.cluster.local
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/nats-config
                - name: pid
                  mountPath: /var/run/nats
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 8222
                initialDelaySeconds: 10
                periodSeconds: 30
                successThreshold: 1
                timeoutSeconds: 5
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 8222
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              startupProbe:
                failureThreshold: 90
                httpGet:
                  path: /healthz
                  port: 8222
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              lifecycle:
                preStop:
                  exec:
                    command:
                      - nats-server
                      - -sl=ldm=/var/run/nats/nats.pid
            - name: reloader
              image: natsio/nats-server-config-reloader:0.11.0
              imagePullPolicy: IfNotPresent
              resources: {}
              command:
                - nats-server-config-reloader
                - -pid
                - /var/run/nats/nats.pid
                - -config
                - /etc/nats-config/nats.conf
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/nats-config
                - name: pid
                  mountPath: /var/run/nats
            - name: metrics
              image: natsio/prometheus-nats-exporter:0.12.0
              imagePullPolicy: IfNotPresent
              resources: {}
              args:
                - -connz
                - -routez
                - -subz
                - -varz
                - -prefix=nats
                - -use_internal_server_id
                - http://localhost:8222/
              ports:
                - containerPort: 7777
                  name: metrics
      volumeClaimTemplates: null
  - apiVersion: v1
    kind: Pod
    metadata:
      name: trustification-nats-test-request-reply
      labels:
        chart: nats-0.19.17
        app: trustification-nats-test-request-reply
      annotations:
        helm.sh/hook: test
    spec:
      containers:
        - name: nats-box
          image: natsio/nats-box:0.13.8
          env:
            - name: NATS_HOST
              value: trustification-nats
          command:
            - /bin/sh
            - -ec
            - 'nats reply -s nats://$NATS_HOST:4222 ''name.>'' --command "echo 1"
              &

              '
            - '"&&"

              '
            - 'name=$(nats request -s nats://$NATS_HOST:4222 name.test '''' 2>/dev/null)

              '
            - '"&&"

              '
            - '[ $name = test ]

              '
      restartPolicy: Never
parameters:
- name: BACKEND_IMAGE
  required: true
- name: FRONTEND_IMAGE
  required: true
- name: INTEGRATION_TESTS_IMAGE
  required: true
- name: IMAGE_TAG
  required: true
- name: REPLICAS
  value: "1"
- name: AWS_REGION
  required: true
- name: BOMBASTIC_STORAGE_BUCKET
  required: true
- name: BOMBASTIC_AWS_SECRET_NAME
  required: true
- name: BOMBASTIC_INDEXER_STORED_TOPIC
  required: true
- name: BOMBASTIC_INDEXER_INDEXED_TOPIC
  required: true
- name: BOMBASTIC_INDEXER_FAILED_TOPIC
  required: true
- name: BOMBASTIC_INDEXER_GUAC_TOPIC
  required: true
- name: BOMBASTIC_WALKER_RESOURCES
  required: true
- name: VEXINATION_STORAGE_BUCKET
  required: true
- name: VEXINATION_AWS_SECRET_NAME
  required: true
- name: VEXINATION_INDEXER_STORED_TOPIC
  required: true
- name: VEXINATION_INDEXER_INDEXED_TOPIC
  required: true
- name: VEXINATION_INDEXER_FAILED_TOPIC
  required: true
- name: VEXINATION_INDEXER_GUAC_TOPIC
  required: true
- name: ISSUER_URL
  required: true
- name: CONFIG_NAME
  required: true
- name: DOMAIN
  required: true
- name: BOMBASTIC_INDEXER_RESOURCES
  required: true
- name: BOMBASTIC_API_RESOURCES
  required: true
- name: VEXINATION_API_RESOURCES
  required: true
- name: VEXINATION_INDEXER_RESOURCES
  required: true
- name: SPOG_API_RESOURCES
  required: true
- name: SPOG_UI_RESOURCES
  required: true
- name: OIDC_PROVIDER_CLIENT_SECRET_NAME
  required: true
- name: OIDC_PROVIDER_CLIENT_SECRET_KEY
  required: true
- name: V11Y_API_RESOURCES
  required: true
- name: COLLECTORIST_RESOURCES
  required: true
- name: COLLECTOR_OSV_RESOURCES
  required: true
- name: COLLECTOR_SNYK_RESOURCES
  required: true
- name: COLLECTOR_NVD_RESOURCES
  required: true
- name: EXHORT_API_RESOURCES
  required: true
- name: GUAC_IMAGE
  required: true
- name: K8S_NAMESPACE
  required: true
