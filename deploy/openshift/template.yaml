apiVersion: v1
kind: Template
metadata:
  name: trustification
objects:
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: guac-graphql
      labels:
        app.kubernetes.io/name: guac-graphql
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
    spec:
      podSelector:
        matchLabels:
          app.kubernetes.io/name: guac-graphql
          app.kubernetes.io/component: guac
          app.kubernetes.io/instance: trustification
      policyTypes:
        - Ingress
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  kubernetes.io/metadata.name: ${K8S_NAMESPACE}
          ports:
            - protocol: TCP
              port: 8080
        - from:
            - namespaceSelector: {}
          ports:
            - protocol: TCP
              port: 9010
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: bombastic-api-auth
      labels:
        app.kubernetes.io/name: bombastic-api-auth
        app.kubernetes.io/component: bombastic
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
    data:
      auth.yaml: "\nauthentication:\n  clients:\n\n    - clientId: frontend\n    \
        \  issuerUrl: http://ssochange-me/realms/chicken\n      scopeMappings: &keycloakScopeMappings\n\
        \        \"create:document\": [ \"create.sbom\", \"create.vex\" ]\n      \
        \  \"read:document\": [ \"read.sbom\", \"read.vex\" ]\n        \"update:document\"\
        : [ \"update.sbom\", \"update.vex\" ]\n        \"delete:document\": [ \"delete.sbom\"\
        , \"delete.vex\" ]\n\n    - clientId: walker\n      issuerUrl: http://ssochange-me/realms/chicken\n\
        \      scopeMappings: *keycloakScopeMappings\n"
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: spog-api-auth
      labels:
        app.kubernetes.io/name: spog-api-auth
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
    data:
      auth.yaml: "\nauthentication:\n  clients:\n\n    - clientId: frontend\n    \
        \  issuerUrl: http://ssochange-me/realms/chicken\n      scopeMappings: &keycloakScopeMappings\n\
        \        \"create:document\": [ \"create.sbom\", \"create.vex\" ]\n      \
        \  \"read:document\": [ \"read.sbom\", \"read.vex\" ]\n        \"update:document\"\
        : [ \"update.sbom\", \"update.vex\" ]\n        \"delete:document\": [ \"delete.sbom\"\
        , \"delete.vex\" ]\n\n    - clientId: walker\n      issuerUrl: http://ssochange-me/realms/chicken\n\
        \      scopeMappings: *keycloakScopeMappings\n"
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: spog-ui-backend
      labels:
        app.kubernetes.io/name: spog-ui-backend
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
    data: null
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: v11y-api-auth
      labels:
        app.kubernetes.io/name: v11y-api-auth
        app.kubernetes.io/component: v11y
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
    data:
      auth.yaml: "\nauthentication:\n  clients:\n\n    - clientId: frontend\n    \
        \  issuerUrl: http://ssochange-me/realms/chicken\n      scopeMappings: &keycloakScopeMappings\n\
        \        \"create:document\": [ \"create.sbom\", \"create.vex\" ]\n      \
        \  \"read:document\": [ \"read.sbom\", \"read.vex\" ]\n        \"update:document\"\
        : [ \"update.sbom\", \"update.vex\" ]\n        \"delete:document\": [ \"delete.sbom\"\
        , \"delete.vex\" ]\n\n    - clientId: walker\n      issuerUrl: http://ssochange-me/realms/chicken\n\
        \      scopeMappings: *keycloakScopeMappings\n"
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: vexination-api-auth
      labels:
        app.kubernetes.io/name: vexination-api-auth
        app.kubernetes.io/component: vexination
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
    data:
      auth.yaml: "\nauthentication:\n  clients:\n\n    - clientId: frontend\n    \
        \  issuerUrl: http://ssochange-me/realms/chicken\n      scopeMappings: &keycloakScopeMappings\n\
        \        \"create:document\": [ \"create.sbom\", \"create.vex\" ]\n      \
        \  \"read:document\": [ \"read.sbom\", \"read.vex\" ]\n        \"update:document\"\
        : [ \"update.sbom\", \"update.vex\" ]\n        \"delete:document\": [ \"delete.sbom\"\
        , \"delete.vex\" ]\n\n    - clientId: walker\n      issuerUrl: http://ssochange-me/realms/chicken\n\
        \      scopeMappings: *keycloakScopeMappings\n"
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: v11y-walker
      labels:
        app.kubernetes.io/name: v11y-walker
        app.kubernetes.io/component: v11y
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
  - apiVersion: v1
    kind: Service
    metadata:
      name: bombastic-api
      labels:
        app.kubernetes.io/name: bombastic-api
        app.kubernetes.io/component: bombastic
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      ports:
        - name: endpoint
          port: 80
          protocol: TCP
          targetPort: endpoint
      selector:
        app.kubernetes.io/name: bombastic-api
        app.kubernetes.io/component: bombastic
        app.kubernetes.io/instance: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      name: documentation
      labels:
        app.kubernetes.io/name: documentation
        app.kubernetes.io/component: documentation
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      ports:
        - name: endpoint
          port: 80
          protocol: TCP
          targetPort: endpoint
      selector:
        app.kubernetes.io/name: documentation
        app.kubernetes.io/component: documentation
        app.kubernetes.io/instance: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      name: guac-graphql
      labels:
        app.kubernetes.io/name: guac-graphql
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      ports:
        - name: endpoint
          port: 80
          protocol: TCP
          targetPort: endpoint
      selector:
        app.kubernetes.io/name: guac-graphql
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      name: spog-api
      labels:
        app.kubernetes.io/name: spog-api
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      ports:
        - name: endpoint
          port: 80
          protocol: TCP
          targetPort: endpoint
      selector:
        app.kubernetes.io/name: spog-api
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      name: spog-ui
      labels:
        app.kubernetes.io/name: spog-ui
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      ports:
        - name: endpoint
          port: 80
          protocol: TCP
          targetPort: endpoint
      selector:
        app.kubernetes.io/name: spog-ui
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      name: v11y-api
      labels:
        app.kubernetes.io/name: v11y-api
        app.kubernetes.io/component: v11y
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      ports:
        - name: endpoint
          port: 80
          protocol: TCP
          targetPort: endpoint
      selector:
        app.kubernetes.io/name: v11y-api
        app.kubernetes.io/component: v11y
        app.kubernetes.io/instance: trustification
      type: ClusterIP
  - apiVersion: v1
    kind: Service
    metadata:
      name: vexination-api
      labels:
        app.kubernetes.io/name: vexination-api
        app.kubernetes.io/component: vexination
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      ports:
        - name: endpoint
          port: 80
          protocol: TCP
          targetPort: endpoint
      selector:
        app.kubernetes.io/name: vexination-api
        app.kubernetes.io/component: vexination
        app.kubernetes.io/instance: trustification
      type: ClusterIP
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: bombastic-api
      labels:
        app.kubernetes.io/name: bombastic-api
        app.kubernetes.io/component: bombastic
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: bombastic-api
          app.kubernetes.io/component: bombastic
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: bombastic-api
            app.kubernetes.io/component: bombastic
            app.kubernetes.io/instance: trustification
          annotations:
            configHash/auth: d68e0b36710763f9a35fec957a328805bcb503009ac5efe48f7c42b6d41c3639
        spec:
          containers:
            - name: service
              image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/live
                  port: 9010
              readinessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/ready
                  port: 9010
              command:
                - /trust
              args:
                - bombastic
                - api
                - -p
                - '8080'
                - --validator
                - sbom
                - --index-mode
                - file
                - --auth-configuration
                - /etc/config/auth.yaml
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: RUST_LOG
                  value: info
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: walker
                - name: OIDC_PROVIDER_CLIENT_SECRET
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: http://ssochange-me/realms/chicken
                - name: STORAGE_ACCESS_KEY
                - name: STORAGE_SECRET_KEY
                - name: STORAGE_REGION
                  value: ''
                - name: STORAGE_BUCKET
                  value: ${BOMBASTIC_STORAGE_BUCKET}
                - name: SWAGGER_UI_OIDC_ISSUER_URL
                  value: http://ssochange-me/realms/chicken
                - name: INDEX_SYNC_INTERVAL
                  value: 1m
              ports:
                - containerPort: 9010
                  protocol: TCP
                  name: infra
                - containerPort: 8080
                  name: endpoint
                  protocol: TCP
              volumeMounts:
                - name: config-auth
                  mountPath: /etc/config/auth.yaml
                  subPath: auth.yaml
          volumes:
            - name: config-auth
              configMap:
                name: bombastic-api-auth
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: bombastic-indexer
      labels:
        app.kubernetes.io/name: bombastic-indexer
        app.kubernetes.io/component: bombastic
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app.kubernetes.io/name: bombastic-indexer
          app.kubernetes.io/component: bombastic
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: bombastic-indexer
            app.kubernetes.io/component: bombastic
            app.kubernetes.io/instance: trustification
        spec:
          volumes:
            - name: data
              emptyDir: {}
          containers:
            - name: service
              image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/live
                  port: 9010
              readinessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/ready
                  port: 9010
              command:
                - /trust
              args:
                - bombastic
                - indexer
                - --stored-topic
                - sbom-stored
                - --indexed-topic
                - sbom-indexed
                - --failed-topic
                - sbom-failed
                - --index-mode
                - file
                - --index-dir
                - /data/index
              env:
                - name: RUST_LOG
                  value: info
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: STORAGE_ACCESS_KEY
                - name: STORAGE_SECRET_KEY
                - name: STORAGE_REGION
                  value: ''
                - name: STORAGE_BUCKET
                  value: ${BOMBASTIC_STORAGE_BUCKET}
                - name: EVENT_BUS
                  value: sqs
                - name: SQS_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_access_key_id
                      name: event-bus-credentials
                - name: SQS_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_secret_access_key
                      name: event-bus-credentials
                - name: SQS_REGION
                  value: <region>
                - name: INDEX_WRITER_MEMORY_BYTES
                  value: 128MiB
                - name: INDEX_SYNC_INTERVAL
                  value: 1m
              volumeMounts:
                - name: data
                  mountPath: /data
              ports:
                - containerPort: 9010
                  protocol: TCP
                  name: infra
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: documentation
      labels:
        app.kubernetes.io/name: documentation
        app.kubernetes.io/component: documentation
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: documentation
          app.kubernetes.io/component: documentation
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: documentation
            app.kubernetes.io/component: documentation
            app.kubernetes.io/instance: trustification
        spec:
          volumes:
            - name: endpoints
              emptyDir: {}
            - name: run
              emptyDir: {}
          containers:
            - name: service
              image: ghcr.io/trustification/trust-docs:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  memory: 64Mi
                requests:
                  memory: 64Mi
              volumeMounts:
                - name: run
                  mountPath: /run
              ports:
                - containerPort: 8080
                  name: endpoint
                  protocol: TCP
              livenessProbe:
                httpGet:
                  path: /
                  port: 8080
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /
                  port: 8080
                initialDelaySeconds: 2
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: bombastic-collector
      labels:
        app.kubernetes.io/name: bombastic-collector
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app.kubernetes.io/name: bombastic-collector
          app.kubernetes.io/component: guac
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: bombastic-collector
            app.kubernetes.io/component: guac
            app.kubernetes.io/instance: trustification
        spec:
          containers:
            - name: service
              image: ghcr.io/trustification/guac:v0.3.32
              imagePullPolicy: IfNotPresent
              command:
                - /opt/guac/guacone
              args:
                - collect
                - s3
                - --poll
              env:
                - name: STORAGE_ACCESS_KEY
                - name: STORAGE_SECRET_KEY
                - name: STORAGE_REGION
                  value: ''
                - name: GUAC_S3_BUCKET
                  value: ${BOMBASTIC_STORAGE_BUCKET}
                - name: GUAC_S3_MP
                  value: sqs
                - name: SQS_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_access_key_id
                      name: event-bus-credentials
                - name: SQS_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_secret_access_key
                      name: event-bus-credentials
                - name: SQS_REGION
                  value: <region>
                - name: GUAC_S3_QUEUES
                  value: sbom-indexed
                - name: GUAC_GQL_ADDR
                  value: http://guac-graphql.${K8S_NAMESPACE}.svc.cluster.local/query
                - name: GUAC_CSUB_ADDR
                  value: guac-collectsub.${K8S_NAMESPACE}.svc.cluster.local:2782
              volumeMounts: null
          volumes: null
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: guac-graphql
      labels:
        app.kubernetes.io/name: guac-graphql
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: guac-graphql
          app.kubernetes.io/component: guac
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: guac-graphql
            app.kubernetes.io/component: guac
            app.kubernetes.io/instance: trustification
        spec:
          initContainers:
            - name: migrate
              image: ghcr.io/trustification/guac:v0.3.32
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
              args:
                - -ec
                - 'TC_PGOPTIONS="?"

                  TC_PGOPTIONS="${TC_PGOPTIONS}sslmode=${TC_PGSSLMODE}&"

                  exec /opt/guac/guacmigrate "--db-address" "postgres://${TC_PGUSER}:${TC_PGPASSWORD}@${TC_PGHOST}:${TC_PGPORT}/${TC_PGDATABASE}${TC_PGOPTIONS}"
                  "--db-driver" "postgres" "--db-debug" "true"

                  '
              env:
                - name: TC_PGHOST
                  valueFrom:
                    secretKeyRef:
                      key: db.host
                      name: postgresql-admin-credentials
                - name: TC_PGPORT
                  valueFrom:
                    secretKeyRef:
                      key: db.port
                      name: postgresql-admin-credentials
                - name: TC_PGDATABASE
                  valueFrom:
                    secretKeyRef:
                      key: db.name
                      name: postgresql-credentials
                - name: TC_PGUSER
                  valueFrom:
                    secretKeyRef:
                      key: db.user
                      name: postgresql-admin-credentials
                - name: TC_PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: db.password
                      name: postgresql-admin-credentials
                - name: TC_PGSSLMODE
                  value: require
              volumeMounts: null
          containers:
            - name: service
              image: ghcr.io/trustification/guac:v0.3.32
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
              args:
                - -ec
                - 'TC_PGOPTIONS="?"

                  TC_PGOPTIONS="${TC_PGOPTIONS}sslmode=${TC_PGSSLMODE}&"

                  exec /opt/guac/guacgql "--gql-backend" "ent" "--db-address" "postgres://${TC_PGUSER}:${TC_PGPASSWORD}@${TC_PGHOST}:${TC_PGPORT}/${TC_PGDATABASE}${TC_PGOPTIONS}"
                  "--db-driver" "postgres" "--db-migrate=false"

                  '
              workingDir: /guac
              env:
                - name: TC_PGHOST
                  valueFrom:
                    secretKeyRef:
                      key: db.host
                      name: postgresql-credentials
                - name: TC_PGPORT
                  valueFrom:
                    secretKeyRef:
                      key: db.port
                      name: postgresql-credentials
                - name: TC_PGDATABASE
                  valueFrom:
                    secretKeyRef:
                      key: db.name
                      name: postgresql-credentials
                - name: TC_PGUSER
                  valueFrom:
                    secretKeyRef:
                      key: db.user
                      name: postgresql-credentials
                - name: TC_PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: db.password
                      name: postgresql-credentials
                - name: TC_PGSSLMODE
                  value: require
                - name: GUAC_PROMETHEUS_ADDR
                  value: '9010'
              volumeMounts: null
              readinessProbe:
                httpGet:
                  path: /healthz
                  port: 8080
                  scheme: HTTP
              ports:
                - containerPort: 9010
                  protocol: TCP
                  name: infra
                - containerPort: 8080
                  protocol: TCP
                  name: endpoint
          volumes: null
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: vexination-collector
      labels:
        app.kubernetes.io/name: vexination-collector
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app.kubernetes.io/name: vexination-collector
          app.kubernetes.io/component: guac
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: vexination-collector
            app.kubernetes.io/component: guac
            app.kubernetes.io/instance: trustification
        spec:
          containers:
            - name: service
              image: ghcr.io/trustification/guac:v0.3.32
              imagePullPolicy: IfNotPresent
              command:
                - /opt/guac/guacone
              args:
                - collect
                - s3
                - --poll
              env:
                - name: STORAGE_ACCESS_KEY
                - name: STORAGE_SECRET_KEY
                - name: STORAGE_REGION
                  value: ''
                - name: GUAC_S3_BUCKET
                  value: ${VEXINATION_STORAGE_BUCKET}
                - name: GUAC_S3_MP
                  value: sqs
                - name: SQS_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_access_key_id
                      name: event-bus-credentials
                - name: SQS_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_secret_access_key
                      name: event-bus-credentials
                - name: SQS_REGION
                  value: <region>
                - name: GUAC_S3_QUEUES
                  value: vex-indexed
                - name: GUAC_GQL_ADDR
                  value: http://guac-graphql.${K8S_NAMESPACE}.svc.cluster.local/query
                - name: GUAC_CSUB_ADDR
                  value: guac-collectsub.${K8S_NAMESPACE}.svc.cluster.local:2782
              volumeMounts: null
          volumes: null
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: spog-api
      labels:
        app.kubernetes.io/name: spog-api
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: spog-api
          app.kubernetes.io/component: spog
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: spog-api
            app.kubernetes.io/component: spog
            app.kubernetes.io/instance: trustification
          annotations:
            configHash/auth: d68e0b36710763f9a35fec957a328805bcb503009ac5efe48f7c42b6d41c3639
            configHash/ui: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        spec:
          containers:
            - name: service
              image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/live
                  port: 9010
              readinessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/ready
                  port: 9010
              command:
                - /trust
              args:
                - spog
                - api
                - -p
                - '8080'
                - --bombastic-url
                - http://bombastic-api.${K8S_NAMESPACE}.svc.cluster.local
                - --vexination-url
                - http://vexination-api.${K8S_NAMESPACE}.svc.cluster.local
                - --collectorist-url
                - http://collectorist-api.${K8S_NAMESPACE}.svc.cluster.local
                - --v11y-url
                - http://v11y-api.${K8S_NAMESPACE}.svc.cluster.local
                - --exhort-url
                - http://exhort-api.${K8S_NAMESPACE}.svc.cluster.local
                - --crda-url
                - https://rhda.rhcloud.com/api/v4/analysis
                - --guac
                - http://guac-graphql.${K8S_NAMESPACE}.svc.cluster.local/query
                - --auth-configuration
                - /etc/config/auth.yaml
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: RUST_LOG
                  value: info
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: walker
                - name: OIDC_PROVIDER_CLIENT_SECRET
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: http://ssochange-me/realms/chicken
                - name: SWAGGER_UI_OIDC_ISSUER_URL
                  value: http://ssochange-me/realms/chicken
              ports:
                - containerPort: 9010
                  protocol: TCP
                  name: infra
                - containerPort: 8080
                  name: endpoint
                  protocol: TCP
              volumeMounts:
                - name: config-auth
                  mountPath: /etc/config/auth.yaml
                  subPath: auth.yaml
          volumes:
            - name: config-auth
              configMap:
                name: spog-api-auth
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: spog-ui
      labels:
        app.kubernetes.io/name: spog-ui
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: spog-ui
          app.kubernetes.io/component: spog
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          annotations:
            configHash/backend: 8e1d3ac714380685ea3b7be91aa42579d92a4a405036daf65291a80892c7d185
          labels:
            app.kubernetes.io/name: spog-ui
            app.kubernetes.io/component: spog
            app.kubernetes.io/instance: trustification
        spec:
          volumes:
            - name: endpoints
              emptyDir: {}
            - name: run
              emptyDir: {}
            - name: config
              configMap:
                optional: true
                name: spog-ui-backend
          containers:
            - name: service
              image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              resources:
                limits:
                  memory: 64Mi
                requests:
                  memory: 64Mi
              command:
                - /nginx.sh
              env:
                - name: API_URL
                  value: http://apichange-me
                - name: BOMBASTIC_URL
                  value: http://sbomchange-me
                - name: VEXINATION_URL
                  value: http://vexchange-me
                - name: ISSUER_URL
                  value: http://ssochange-me/realms/chicken
                - name: CLIENT_ID
                  value: frontend
                - name: BACKEND_JSON_FILE
                  value: /etc/config/backend.json
              volumeMounts:
                - name: config
                  mountPath: /etc/config
                  readOnly: true
                - name: endpoints
                  mountPath: /endpoints
                - name: run
                  mountPath: /run
              ports:
                - containerPort: 8080
                  name: endpoint
                  protocol: TCP
              livenessProbe:
                httpGet:
                  path: /
                  port: 8080
                initialDelaySeconds: 2
              readinessProbe:
                httpGet:
                  path: /
                  port: 8080
                initialDelaySeconds: 2
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: v11y-api
      labels:
        app.kubernetes.io/name: v11y-api
        app.kubernetes.io/component: v11y
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: v11y-api
          app.kubernetes.io/component: v11y
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: v11y-api
            app.kubernetes.io/component: v11y
            app.kubernetes.io/instance: trustification
          annotations:
            configHash/auth: d68e0b36710763f9a35fec957a328805bcb503009ac5efe48f7c42b6d41c3639
        spec:
          containers:
            - name: service
              image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/live
                  port: 9010
              readinessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/ready
                  port: 9010
              command:
                - /trust
              args:
                - v11y
                - api
                - -p
                - '8080'
                - --index-mode
                - file
                - --auth-configuration
                - /etc/config/auth.yaml
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: RUST_LOG
                  value: info
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: walker
                - name: OIDC_PROVIDER_CLIENT_SECRET
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: http://ssochange-me/realms/chicken
                - name: STORAGE_ACCESS_KEY
                - name: STORAGE_SECRET_KEY
                - name: STORAGE_REGION
                  value: ''
                - name: STORAGE_BUCKET
                  value: ${V11Y_STORAGE_BUCKET}
                - name: INDEX_SYNC_INTERVAL
                  value: 1m
              ports:
                - containerPort: 9010
                  protocol: TCP
                  name: infra
                - containerPort: 8080
                  name: endpoint
                  protocol: TCP
              volumeMounts:
                - name: config-auth
                  mountPath: /etc/config/auth.yaml
                  subPath: auth.yaml
          volumes:
            - name: config-auth
              configMap:
                name: v11y-api-auth
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: v11y-indexer
      labels:
        app.kubernetes.io/name: v11y-indexer
        app.kubernetes.io/component: v11y
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app.kubernetes.io/name: v11y-indexer
          app.kubernetes.io/component: v11y
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: v11y-indexer
            app.kubernetes.io/component: v11y
            app.kubernetes.io/instance: trustification
        spec:
          volumes:
            - name: data
              emptyDir: {}
          containers:
            - name: service
              image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/live
                  port: 9010
              readinessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/ready
                  port: 9010
              command:
                - /trust
              args:
                - v11y
                - indexer
                - --stored-topic
                - v11y-stored
                - --indexed-topic
                - v11y-indexed
                - --failed-topic
                - v11y-failed
                - --index-mode
                - file
                - --index-dir
                - /data/index
              env:
                - name: RUST_LOG
                  value: info
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: STORAGE_ACCESS_KEY
                - name: STORAGE_SECRET_KEY
                - name: STORAGE_REGION
                  value: ''
                - name: STORAGE_BUCKET
                  value: ${V11Y_STORAGE_BUCKET}
                - name: EVENT_BUS
                  value: sqs
                - name: SQS_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_access_key_id
                      name: event-bus-credentials
                - name: SQS_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_secret_access_key
                      name: event-bus-credentials
                - name: SQS_REGION
                  value: <region>
                - name: INDEX_WRITER_MEMORY_BYTES
                  value: 128MiB
                - name: INDEX_SYNC_INTERVAL
                  value: 1m
              volumeMounts:
                - name: data
                  mountPath: /data
              ports:
                - containerPort: 9010
                  protocol: TCP
                  name: infra
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: vexination-api
      labels:
        app.kubernetes.io/name: vexination-api
        app.kubernetes.io/component: vexination
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: ${{REPLICAS}}
      selector:
        matchLabels:
          app.kubernetes.io/name: vexination-api
          app.kubernetes.io/component: vexination
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: vexination-api
            app.kubernetes.io/component: vexination
            app.kubernetes.io/instance: trustification
          annotations:
            configHash/auth: d68e0b36710763f9a35fec957a328805bcb503009ac5efe48f7c42b6d41c3639
        spec:
          containers:
            - name: service
              image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              command:
                - /trust
              args:
                - vexination
                - api
                - -p
                - '8080'
                - --index-mode
                - file
                - --auth-configuration
                - /etc/config/auth.yaml
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: RUST_LOG
                  value: info
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: HTTP_SERVER_BIND_ADDR
                  value: '::'
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: walker
                - name: OIDC_PROVIDER_CLIENT_SECRET
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: http://ssochange-me/realms/chicken
                - name: STORAGE_ACCESS_KEY
                - name: STORAGE_SECRET_KEY
                - name: STORAGE_REGION
                  value: ''
                - name: STORAGE_BUCKET
                  value: ${VEXINATION_STORAGE_BUCKET}
                - name: SWAGGER_UI_OIDC_ISSUER_URL
                  value: http://ssochange-me/realms/chicken
                - name: INDEX_SYNC_INTERVAL
                  value: 1m
              ports:
                - containerPort: 9010
                  protocol: TCP
                  name: infra
                - containerPort: 8080
                  name: endpoint
                  protocol: TCP
              livenessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/live
                  port: 9010
              readinessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/ready
                  port: 9010
              volumeMounts:
                - name: config-auth
                  mountPath: /etc/config/auth.yaml
                  subPath: auth.yaml
          volumes:
            - name: config-auth
              configMap:
                name: vexination-api-auth
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: vexination-indexer
      labels:
        app.kubernetes.io/name: vexination-indexer
        app.kubernetes.io/component: vexination
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app.kubernetes.io/name: vexination-indexer
          app.kubernetes.io/component: vexination
          app.kubernetes.io/instance: trustification
      template:
        metadata:
          labels:
            app.kubernetes.io/name: vexination-indexer
            app.kubernetes.io/component: vexination
            app.kubernetes.io/instance: trustification
        spec:
          volumes:
            - name: data
              emptyDir: {}
          containers:
            - name: service
              image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              command:
                - /trust
              args:
                - vexination
                - indexer
                - --stored-topic
                - vex-stored
                - --indexed-topic
                - vex-indexed
                - --failed-topic
                - vex-failed
                - --index-mode
                - file
                - --index-dir
                - /data/index
              env:
                - name: RUST_LOG
                  value: info
                - name: INFRASTRUCTURE_ENABLED
                  value: 'true'
                - name: INFRASTRUCTURE_BIND
                  value: '[::]:9010'
                - name: STORAGE_ACCESS_KEY
                - name: STORAGE_SECRET_KEY
                - name: STORAGE_REGION
                  value: ''
                - name: STORAGE_BUCKET
                  value: ${VEXINATION_STORAGE_BUCKET}
                - name: EVENT_BUS
                  value: sqs
                - name: SQS_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_access_key_id
                      name: event-bus-credentials
                - name: SQS_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      key: aws_secret_access_key
                      name: event-bus-credentials
                - name: SQS_REGION
                  value: <region>
                - name: INDEX_WRITER_MEMORY_BYTES
                  value: 128MiB
                - name: INDEX_SYNC_INTERVAL
                  value: 1m
              volumeMounts:
                - name: data
                  mountPath: /data
              ports:
                - containerPort: 9010
                  protocol: TCP
                  name: infra
              livenessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/live
                  port: 9010
              readinessProbe:
                initialDelaySeconds: 2
                httpGet:
                  path: /health/ready
                  port: 9010
  - apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: v11y-walker
      labels:
        app.kubernetes.io/name: v11y-walker
        app.kubernetes.io/component: v11y
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
    spec:
      schedule: 0 1 * * *
      suspend: false
      concurrencyPolicy: Forbid
      jobTemplate:
        spec:
          template:
            metadata:
              labels:
                app.kubernetes.io/name: v11y-walker
                app.kubernetes.io/component: v11y
                app.kubernetes.io/instance: trustification
            spec:
              restartPolicy: Never
              volumes:
                - name: cvelist
                  persistentVolumeClaim:
                    claimName: v11y-walker
              initContainers:
                - name: git-fetch
                  image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
                  imagePullPolicy: IfNotPresent
                  volumeMounts:
                    - mountPath: /git
                      name: cvelist
                  command:
                    - /bin/sh
                  workingDir: /git
                  args:
                    - -ec
                    - "if test -d cvelistV5; then\n  cd cvelistV5\n  git pull\nelse\n\
                      \  git clone https://github.com/CVEProject/cvelistV5\nfi\n"
              containers:
                - name: walker
                  image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
                  imagePullPolicy: IfNotPresent
                  livenessProbe:
                    initialDelaySeconds: 2
                    httpGet:
                      path: /health/live
                      port: 9010
                  readinessProbe:
                    initialDelaySeconds: 2
                    httpGet:
                      path: /health/ready
                      port: 9010
                  volumeMounts:
                    - mountPath: /mnt
                      name: cvelist
                  command:
                    - /trust
                  args:
                    - v11y
                    - walker
                    - --source
                    - /mnt/cvelistV5
                    - --delta-file
                    - /mnt/last-delta
                  env:
                    - name: RUST_LOG
                      value: info
                    - name: INFRASTRUCTURE_ENABLED
                      value: 'true'
                    - name: INFRASTRUCTURE_BIND
                      value: '[::]:9010'
                    - name: STORAGE_ACCESS_KEY
                    - name: STORAGE_SECRET_KEY
                    - name: STORAGE_REGION
                      value: ''
                    - name: STORAGE_BUCKET
                      value: ${V11Y_STORAGE_BUCKET}
                  ports:
                    - containerPort: 9010
                      protocol: TCP
                      name: infra
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: bombastic-api
      labels:
        app.kubernetes.io/name: bombastic-api
        app.kubernetes.io/component: bombastic
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      rules:
        - host: sbomchange-me
          http:
            paths:
              - pathType: Prefix
                path: /
                backend:
                  service:
                    name: bombastic-api
                    port:
                      name: endpoint
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: documentation
      labels:
        app.kubernetes.io/name: documentation
        app.kubernetes.io/component: documentation
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      rules:
        - host: docschange-me
          http:
            paths:
              - pathType: Prefix
                path: /
                backend:
                  service:
                    name: documentation
                    port:
                      name: endpoint
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: spog-api
      labels:
        app.kubernetes.io/name: spog-api
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      rules:
        - host: apichange-me
          http:
            paths:
              - pathType: Prefix
                path: /
                backend:
                  service:
                    name: spog-api
                    port:
                      name: endpoint
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: spog-ui
      labels:
        app.kubernetes.io/name: spog-ui
        app.kubernetes.io/component: spog
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      rules:
        - host: consolechange-me
          http:
            paths:
              - pathType: Prefix
                path: /
                backend:
                  service:
                    name: spog-ui
                    port:
                      name: endpoint
  - apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: vexination-api
      labels:
        app.kubernetes.io/name: vexination-api
        app.kubernetes.io/component: vexination
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations: null
    spec:
      rules:
        - host: vexchange-me
          http:
            paths:
              - pathType: Prefix
                path: /
                backend:
                  service:
                    name: vexination-api
                    port:
                      name: endpoint
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: init-guac-db
      labels:
        app.kubernetes.io/name: init-guac-db
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations:
        argocd.argoproj.io/hook: Sync
        argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
        argocd.argoproj.io/sync-wave: '0'
        helm.sh/hook-weight: '5'
        helm.sh/hook: pre-install,pre-upgrade
        helm.sh/hook-delete-policy: before-hook-creation
    data:
      init.sql: "-- ensure we have the database\nSELECT 'CREATE DATABASE ' || :'db_name'\n\
        WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = :'db_name')\\gexec\n\
        \n-- create the user (if it doesn't exist)\nCREATE OR REPLACE FUNCTION add_user_if_not_exists(username\
        \ NAME) RETURNS integer\n    AS $$\nBEGIN\n    IF NOT EXISTS (SELECT FROM\
        \ pg_roles\n        WHERE rolname = username) THEN\n\n        EXECUTE FORMAT('CREATE\
        \ ROLE \"%I\" LOGIN', username);\n\n    END IF;\n    RETURN NULL;\nEND;\n\
        $$ language plpgsql;\n\nSELECT add_user_if_not_exists(:'db_user');\n\n-- now\
        \ set the password\nALTER USER :db_user WITH PASSWORD :'db_password';\n\n\
        -- grant permission to connect\nGRANT CONNECT ON DATABASE :db_name TO :db_user;\n\
        \n-- grant permissions on database\n\\connect :db_name\n\nGRANT USAGE ON SCHEMA\
        \ public TO :db_user;\n\n-- grant on existing tables\nGRANT SELECT, INSERT,\
        \ UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO :db_user;\n\n-- grant on\
        \ future tables\nALTER DEFAULT PRIVILEGES\n    IN SCHEMA public\n    GRANT\
        \ SELECT, INSERT, UPDATE, DELETE ON TABLES TO :db_user;\n"
  - kind: Job
    apiVersion: batch/v1
    metadata:
      name: init-dataset
      labels:
        app.kubernetes.io/name: init-dataset
        app.kubernetes.io/component: init
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations:
        argocd.argoproj.io/hook: Sync
        argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
        argocd.argoproj.io/sync-wave: '2'
        helm.sh/hook-weight: '20'
        helm.sh/hook: post-install,post-upgrade
        helm.sh/hook-delete-policy: before-hook-creation
    spec:
      backoffLimit: 1000
      completions: 1
      parallelism: 1
      ttlSecondsAfterFinished: 600
      template:
        metadata:
          labels:
            app.kubernetes.io/name: init-dataset
            app.kubernetes.io/component: init
            app.kubernetes.io/instance: trustification
        spec:
          restartPolicy: OnFailure
          containers:
            - name: run
              image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              command:
                - /usr/bin/bash
              args:
                - -ce
                - "ARGS=\"\"\nif [[ -f /run/secrets/kubernetes.io/serviceaccount/service-ca.crt\
                  \ ]]; then\n  ARGS=\"--sender-root-certificates /run/secrets/kubernetes.io/serviceaccount/service-ca.crt\"\
                  \nfi\n/trust bombastic walker $ARGS --sink http://bombastic-api.${K8S_NAMESPACE}.svc.cluster.local\
                  \ --source file:/data/sbom\necho SBOM import done\n/trust vexination\
                  \ walker $ARGS --sink http://vexination-api.${K8S_NAMESPACE}.svc.cluster.local/api/v1/vex\
                  \ --source file:/data/csaf\necho CSAF import done\n"
              env:
                - name: OIDC_PROVIDER_CLIENT_ID
                  value: walker
                - name: OIDC_PROVIDER_CLIENT_SECRET
                - name: OIDC_PROVIDER_ISSUER_URL
                  value: http://ssochange-me/realms/chicken
                - name: RUST_LOG
                  value: info
              volumeMounts: null
          volumes: null
  - kind: Job
    apiVersion: batch/v1
    metadata:
      name: init-guac-db
      labels:
        app.kubernetes.io/name: init-guac-db
        app.kubernetes.io/component: guac
        app.kubernetes.io/instance: trustification
        app.kubernetes.io/version: 0.2.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: trustification
      annotations:
        argocd.argoproj.io/hook: Sync
        argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
        argocd.argoproj.io/sync-wave: '0'
        helm.sh/hook-weight: '5'
        helm.sh/hook: pre-install,pre-upgrade
        helm.sh/hook-delete-policy: before-hook-creation
    spec:
      backoffLimit: 1000
      completions: 1
      parallelism: 1
      ttlSecondsAfterFinished: 600
      template:
        metadata:
          labels:
            app.kubernetes.io/name: init-guac-db
            app.kubernetes.io/component: guac
            app.kubernetes.io/instance: trustification
        spec:
          restartPolicy: OnFailure
          volumes:
            - name: init-data
              configMap:
                name: init-guac-db
          containers:
            - name: setup
              image: ghcr.io/trustification/trust:f50f3499259a8ca57798d07e645d61cc18f5b6d8
              imagePullPolicy: IfNotPresent
              env:
                - name: PGHOST
                  valueFrom:
                    secretKeyRef:
                      key: db.host
                      name: postgresql-admin-credentials
                - name: PGPORT
                  valueFrom:
                    secretKeyRef:
                      key: db.port
                      name: postgresql-admin-credentials
                - name: PGDATABASE
                  valueFrom:
                    secretKeyRef:
                      key: db.name
                      name: postgresql-admin-credentials
                - name: PGUSER
                  valueFrom:
                    secretKeyRef:
                      key: db.user
                      name: postgresql-admin-credentials
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: db.password
                      name: postgresql-admin-credentials
                - name: PGSSLMODE
                  value: require
                - name: DB_NAME
                  valueFrom:
                    secretKeyRef:
                      key: db.name
                      name: postgresql-credentials
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: db.user
                      name: postgresql-credentials
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: db.password
                      name: postgresql-credentials
              volumeMounts:
                - mountPath: /etc/init-data
                  name: init-data
              command:
                - psql
                - -v
                - ON_ERROR_STOP=1
                - -v
                - db_name=$(DB_NAME)
                - -v
                - db_user=$(DB_USERNAME)
                - -v
                - db_password=$(DB_PASSWORD)
                - -f
                - /etc/init-data/init.sql
parameters:
- name: BACKEND_IMAGE
  required: true
- name: FRONTEND_IMAGE
  required: true
- name: INTEGRATION_TESTS_IMAGE
  required: true
- name: IMAGE_TAG
  required: true
- name: AWS_REGION
  required: true
- name: BOMBASTIC_STORAGE_BUCKET
  required: true
- name: BOMBASTIC_AWS_SECRET_NAME
  required: true
- name: BOMBASTIC_INDEXER_STORED_TOPIC
  required: true
- name: BOMBASTIC_INDEXER_INDEXED_TOPIC
  required: true
- name: BOMBASTIC_INDEXER_FAILED_TOPIC
  required: true
- name: BOMBASTIC_INDEXER_GUAC_TOPIC
  required: true
- name: BOMBASTIC_WALKER_RESOURCES
  required: true
- name: VEXINATION_STORAGE_BUCKET
  required: true
- name: VEXINATION_AWS_SECRET_NAME
  required: true
- name: VEXINATION_INDEXER_STORED_TOPIC
  required: true
- name: VEXINATION_INDEXER_INDEXED_TOPIC
  required: true
- name: VEXINATION_INDEXER_FAILED_TOPIC
  required: true
- name: VEXINATION_INDEXER_GUAC_TOPIC
  required: true
- name: ISSUER_URL
  required: true
- name: CONFIG_NAME
  required: true
- name: DOMAIN
  required: true
- name: BOMBASTIC_INDEXER_RESOURCES
  required: true
- name: BOMBASTIC_API_RESOURCES
  required: true
- name: VEXINATION_API_RESOURCES
  required: true
- name: VEXINATION_INDEXER_RESOURCES
  required: true
- name: V11Y_INDEXER_RESOURCES
  required: true
- name: V11Y_WALKER_RESOURCES
  required: true
- name: SPOG_API_RESOURCES
  required: true
- name: SPOG_UI_RESOURCES
  required: true
- name: OIDC_PROVIDER_CLIENT_SECRET_NAME
  required: true
- name: OIDC_PROVIDER_CLIENT_SECRET_KEY
  required: true
- name: V11Y_API_RESOURCES
  required: true
- name: V11Y_STORAGE_BUCKET
  required: true
- name: V11Y_AWS_SECRET_NAME
  required: true
- name: V11Y_INDEXER_STORED_TOPIC
  required: true
- name: V11Y_INDEXER_INDEXED_TOPIC
  required: true
- name: V11Y_INDEXER_FAILED_TOPIC
  required: true
- name: V11Y_INDEXER_GUAC_TOPIC
  required: true
- name: COLLECTORIST_RESOURCES
  required: true
- name: COLLECTOR_OSV_RESOURCES
  required: true
- name: COLLECTOR_SNYK_RESOURCES
  required: true
- name: EXHORT_API_RESOURCES
  required: true
- name: GUAC_IMAGE
  required: true
- name: GUAC_GQL_RESOURCES
  required: true
- name: GUAC_GQL_AFFINITY
  value: "{}"
- name: GUAC_GRAPHQL_REPLICAS
  required: true
- name: GUAC_COLLECTSUB_REPLICAS
  required: true
- name: BOMBASTIC_API_REPLICAS
  required: true
- name: BOMBASTIC_INDEXER_REPLICAS
  required: true
- name: COLLECTORIST_API_REPLICAS
  required: true
- name: EXHORT_API_REPLICAS
  required: true
- name: SPOG_API_REPLICAS
  required: true
- name: SPOG_UI_REPLICAS
  required: true
- name: VEXINATION_API_REPLICAS
  required: true
- name: VEXINATION_INDEXER_REPLICAS
  required: true
- name: V11Y_API_REPLICAS
  required: true
- name: V11Y_INDEXER_REPLICAS
  required: true
- name: BOMBASTIC_COLLECTOR_RESOURCES
  required: true
- name: VEXINATION_COLLECTOR_RESOURCES
  required: true
- name: K8S_NAMESPACE
  required: true
- name: VEXINATION_WALKER_SCHEDULE
  value: "10 * * * *"
- name: BOMBASTIC_WALKER_SCHEDULE
  value: "10 * * * *"
- name: V11Y_WALKER_SCHEDULE
  value: "1 0 * * *"
- name: VEXINATION_COLLECTOR_SCHEDULE
  value: "30 * * * *"
- name: BOMBASTIC_COLLECTOR_SCHEDULE
  value: "0 * * * *"
- name: V11Y_API_INDEX_SYNC_INTERVAL
  value: "1800s"
- name: V11Y_INDEXER_INDEX_SYNC_INTERVAL
  value: "1800s"
- name: V11Y_INDEXER_INDEX_WRITER_MEMORY_BYTES
  value: "134217728"
- name: BOMBASTIC_API_INDEX_SYNC_INTERVAL
  value: "1800s"
- name: BOMBASTIC_INDEXER_INDEX_SYNC_INTERVAL
  value: "1800s"
- name: BOMBASTIC_INDEXER_INDEX_WRITER_MEMORY_BYTES
  value: "134217728"
- name: VEXINATION_API_INDEX_SYNC_INTERVAL
  value: "1800s"
- name: VEXINATION_INDEXER_INDEX_SYNC_INTERVAL
  value: "1800s"
- name: VEXINATION_INDEXER_INDEX_WRITER_MEMORY_BYTES
  value: "134217728"
- name: LOG_LEVEL
  required: false
  value: "info"
- name: CRDA_URL
  required: false
  value: https://rhda.rhcloud.com/api/v4/analysis
- name: BOMBASTIC_WALKER_SUSPEND
  value: "false"
- name: V11Y_WALKER_SUSPEND
  value: "false"
- name: VEXINATION_WALKER_SUSPEND
  value: "false"
- name: SEGMENT_SECRET_NAME
  value: segment-write-keys
- name: SEGMENT_SECRET_API_KEY
  value: spogApi
- name: SEGMENT_SECRET_UI_KEY
  value: spogUi
- name: POSTGRESQL_IMAGE
  value: "docker.io/library/postgres:15"
- name: GUAC_INIT_JOB_SERVICE_ACCOUNT
  value: trustification-service
- name: INITIAL_BACKEND_JSON
  value: "{}"
- name: DATASET_ENABLED_JOB
  value: "true"
- name: DATASET_SUSPEND_JOB
  value: "true"
- name: DATASET_SCHEDULE_JOB
  value: "0 * * * *"
- name: REPLICAS
  value: "1"
