{{ if ( and .Values.keycloak.enabled (not (.Values.keycloakPostInstall).disabled ) ) }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: post-install-keycloak-config
  labels:
    app.kubernetes.io/name: post-install-keycloak-config
    app.kubernetes.io/component: sso
    app.kubernetes.io/part-of: sso
data:
  {{ if hasKey .Values.oidc.clients "frontend" }}
  client-frontend.json: |
    {
      "clientId": {{ .Values.oidc.clients.frontend.clientId | default "frontend" | toJson }},
      "clientAuthenticatorType": "client-secret",
      "enabled": true,
      "publicClient": true,
      "implicitFlowEnabled": true,
      "standardFlowEnabled": true,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "fullScopeAllowed": true,
      "webOrigins": [
        "*"
      ],
      "defaultClientScopes": [
        "email",
        "profile",
        "roles",
        "web-origins",
        "read:document",
        "create:document",
        "delete:document"
      ],
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "attributes": {
        "access.token.lifespan": "300",
        "post.logout.redirect.uris": "+"
      }
    }
  {{ end }}

  {{ if hasKey .Values.oidc.clients "walker" }}
  client-walker.json: |
    {
      "clientId": {{ .Values.oidc.clients.walker.clientId | default "walker" | toJson }},
      "clientAuthenticatorType": "client-secret",
      "enabled": true,
      "publicClient": false,
      "implicitFlowEnabled": false,
      "standardFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": true,
      "fullScopeAllowed": true,
      "defaultClientScopes": [
        "email",
        "profile",
        "roles",
        "web-origins",
        "create:document",
        "read:document"
      ],
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "attributes": {
        "access.token.lifespan": "300",
        "post.logout.redirect.uris": "+"
      }
    }
  {{ end }}

  {{ if hasKey .Values.oidc.clients "testingManager" }}
  client-testing-manager.json: |
    {
      "clientId": {{ .Values.oidc.clients.testingManager.clientId | default "testing-manager" | toJson }},
      "clientAuthenticatorType": "client-secret",
      "enabled": true,
      "publicClient": false,
      "implicitFlowEnabled": false,
      "standardFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": true,
      "fullScopeAllowed": true,
      "defaultClientScopes": [
        "email",
        "profile",
        "roles",
        "web-origins",
        "read:document",
        "create:document",
        "delete:document"
      ],
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "attributes": {
        "access.token.lifespan": "300",
        "post.logout.redirect.uris": "+"
      }
    }
  {{ end }}

  {{ if hasKey .Values.oidc.clients "testingUser" }}
  client-testing-user.json: |
    {
      "clientId": {{ .Values.oidc.clients.testingUser.clientId | default "testing-user" | toJson }},
      "clientAuthenticatorType": "client-secret",
      "enabled": true,
      "publicClient": false,
      "implicitFlowEnabled": false,
      "standardFlowEnabled": false,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": true,
      "fullScopeAllowed": true,
      "defaultClientScopes": [
        "email",
        "profile",
        "roles",
        "web-origins",
        "read:document"
      ],
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "attributes": {
        "access.token.lifespan": "300",
        "post.logout.redirect.uris": "+"
      }
    }
  {{ end }}

  there-is-more.sh: |
    # This file is "sourced" from `init.sh`, so we can use everything that was declared in there. It is intended to
    # add additional configuration which should only be present in a cluster development.

    {{ if hasKey .Values.oidc.clients "testingManager" }}

    # create testing-manager service account
    ID=$(kcadm get clients -r "${REALM}" --query "clientId="{{ .Values.oidc.clients.testingManager.clientId | default "testing-manager" | quote }} --fields id --format csv --noquotes)
    CLIENT_OPTS=()
    if [[ -n "$ID" ]]; then
      # TODO: replace with update once https://github.com/keycloak/keycloak/issues/12484 is fixed
      # kcadm update "clients/${ID}" -r "${REALM}" -f /etc/init-data/client.json "${CLIENT_OPTS[@]}"
      kcadm delete "clients/${ID}" -r "${REALM}"
      kcadm create clients -r "${REALM}" -f "${INIT_DATA}/client-testing-manager.json" "${CLIENT_OPTS[@]}"
    else
      kcadm create clients -r "${REALM}" -f "${INIT_DATA}/client-testing-manager.json" "${CLIENT_OPTS[@]}"
    fi
    kcadm add-roles -r "${REALM}" --uusername service-account-{{ .Values.oidc.clients.testingManager.clientId | default "testing-manager" | quote }} --rolename chicken-manager
    # now set the client-secret
    ID=$(kcadm get clients -r "${REALM}" --query "clientId="{{ .Values.oidc.clients.testingManager.clientId | default "testing-manager" | quote }} --fields id --format csv --noquotes)
    kcadm update "clients/${ID}" -r "${REALM}" -s "secret=${TESTING_MANAGER_SECRET}"

    {{ end }}

    {{ if hasKey .Values.oidc.clients "testingUser" }}

        # create testing-user service account
    ID=$(kcadm get clients -r "${REALM}" --query "clientId="{{ .Values.oidc.clients.testingUser.clientId | default "testing-user" | quote }} --fields id --format csv --noquotes)
    CLIENT_OPTS=()
    if [[ -n "$ID" ]]; then
      # TODO: replace with update once https://github.com/keycloak/keycloak/issues/12484 is fixed
      # kcadm update "clients/${ID}" -r "${REALM}" -f /etc/init-data/client.json "${CLIENT_OPTS[@]}"
      kcadm delete "clients/${ID}" -r "${REALM}"
      kcadm create clients -r "${REALM}" -f "${INIT_DATA}/client-testing-user.json" "${CLIENT_OPTS[@]}"
    else
      kcadm create clients -r "${REALM}" -f "${INIT_DATA}/client-testing-user.json" "${CLIENT_OPTS[@]}"
    fi
    kcadm add-roles -r "${REALM}" --uusername service-account-{{ .Values.oidc.clients.testingUser.clientId | default "testing-user" | quote }} --rolename chicken-manager
    # now set the client-secret
    ID=$(kcadm get clients -r "${REALM}" --query "clientId="{{ .Values.oidc.clients.testingUser.clientId | default "testing-user" | quote }} --fields id --format csv --noquotes)
    kcadm update "clients/${ID}" -r "${REALM}" -s "secret=${TESTING_USER_SECRET}"

    {{ end }}

{{ end }}
